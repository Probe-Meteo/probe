<?php
require_once 'toolbox.phpc'; // set internationalisation environnement
class html extends toolbox
{
// Element's definition'
    protected $TAG = 'html';
    protected $VOIDELEMENT = false;
// Element's 'attributes
    protected $TITLE;
    protected $ID;
    protected $CLASS;
    protected $ATTR = array(
      'id' => null,
      'class' => null,
      'title' => null,
      'href' => null
    );
  PRIVATE $OUTPUT = null; // for complex output (e.g.: <a href=""><abbr></abbr></a>)
// Element's content
  protected $CONTENT = null;

    function attrToString()
    {
      $result = null;
      $attr = array();
//       $this->dump($this->ATTR);

      foreach ($this->ATTR as $attrName => $attrValue)
      {//
        if ( isset($attrValue) && !is_null($attrValue) && strlen($attrValue)!=0 )
        { 
//           var_dump($attrValue);
          $attr[] = $attrName.'="'.filter_var($attrValue, FILTER_SANITIZE_STRING).'"'; 
        }
      }

      $result = count($attr)>0 ? ' '.implode($attr, ' ') : '';
      return $result;
    }
    
    function addChild($child, $html = true)
    {// add child to content. HTML (default) or object as argument
    // Can 'child' be a string or an array ?
//     var_dump($child);
//       $this->dump(($child instanceof html));
/*      if ($child instanceof html)
      {
        $child->buildOutput();
      } else */if (is_string($child))
      {
        $this->appendContent($child);
      }
    }

    function open()
    {
      $attr = $this->attrToString();
      $this->VOIDELEMENT ? $slash = '/' : $slash = '';
      print("<{$this->TAG}{$attr}{$slash}>");
    }
    function close()
    {
//       var_dump($this->VOIDELEMENT);
      $this->VOIDELEMENT ? print null : print("</{$this->TAG}>");
    }


    function getTag()
      { return $this->TAG; }
      
    function setTitle($value)
      { $this->setAttribute('title', $this->toString($value) ); }
    function getTitle()
      { return $this->getAttribute('title'); }
    function setClass($value)
      { $this->setAttribute('class', $this->toString($value) ); }
    function getClass()
      { return $this->getAttribute('class'); }
    function setId($value)
      { $this->setAttribute('id', $value); }
    function getId()
      { return $this->getAttribute('id'); }
    function setHref($value)
      { $this->setAttribute('href', $value); }
    function getHref()
      { return $this->getAttribute('href'); }
      
    // Attribute Accessors
    function setAttribute($attr, $value)
      { $this->ATTR[$attr] = is_null($value) ? null : $value; }
    function getAttribute($attr)
      { return $this->ATTR[$attr]; }

    // allow children to extend the attributes list
    function extendHtmlAttribute($attrList)
    {
      foreach ($attrList as $attrName => $attrValue)
      {
        $this->setAttribute($attrName, $attrValue);
      }
    }

    function resetContent() 
    { 
      $this->CONTENT = null; 
    }
    function setContent($value)
    {
      if (isset($value) && !is_null($value))
        { $this->CONTENT = $value; }
    }
    function getContent()
      { return $this->CONTENT; }
    function appendContent($ctt)
    {// append HTML string to current content
      $this->setContent($this->getContent().$ctt);
    }
    
    function setOutput($value)
      { $this->OUTPUT = $value; }
    function getOutput()
      { return $this->OUTPUT; }

//  public static function buildOutput()
//  {

//  }

  function buildOutput($content = null)
  {
    if (!is_null($content))
      { $this->setContent($content); }
    ob_start();
      $this->open();
        print $this->CONTENT;
      $this->close();
      $output = ob_get_contents();
    ob_end_clean();

// var_dump('[parent]', $output);
    return $output;
  }

  function show() {
    echo $this->buildOutput();
}


    function __construct()
    { }
}

// dl – description list
// http://www.w3.org/TR/html-markup/dl.html
class dl extends html
{
/* $list = array(
    dt<object>
      array(
        dd<object>
        ...
      )
    ...
  );
*/
  protected $TAG = 'dl';
  PRIVATE $ITEMS = array();
  protected $SORT_DEFINITION = false;

  function buildOutput($content = null) 
  {
    ob_start();
      $this->open();
      foreach ($content as $i => $item)
      {
        if (is_object($item))
        {// it's <dt>
          print $item->buildOutput();
        } else if (is_array($item))
        {
          foreach ($item as $d => $def)
          {
//             var_dump($def);
            $def->setPunctuation($d, count($item));
            print $def->buildOutput();
          }
        } else
        {// it's a list of <dd>
          echo "NON-supported";
//           if ($this->SORT_DEFINITION==true)
//             { sort($item); }
        }
      }
      $this->close();
      $output = ob_get_contents();
    ob_end_clean();

// var_dump('[dl]', $output);
    return $output;
  }

  function setSortDefinition($value)
  { $this->SORT_DEFINITION = $value; }
function getSortDefinition()
  { return $this->SORT_DEFINITION; }

  function __construct()
  { }
}

// dt – term or name
// http://www.w3.org/TR/html-markup/dt.html
class dt extends html
{
  protected $TAG = 'dt';

  function __construct($content = null)
  {
    if (!is_null($content))
    {
      $this->setContent($content);
      $this->setId(strtolower(str_replace(' ', '-', $content)));
    }
  }
}

// dd – description or value
// http://www.w3.org/TR/html-markup/dd.html
class dd extends html
{
  protected $TAG = 'dd';

  // Todo: gestion i18n de la ponctuation
  function setPunctuation($currentItem, $totalItems)
  {
//     var_dump($currentItem);
    if ($currentItem+1 < $totalItems)
      { $this->setContent($this->getContent().', ');}
    else
      { $this->setContent($this->getContent().'.');}
}

  function __construct($content = null)
  {
    if (!is_null($content))
    { $this->setContent($content); }
  }
}

// a – hyperlink
// http://www.w3.org/TR/html-markup/a.html
class a extends html
{
  protected $TAG = 'a';

  function __construct($content = null, $href = null)
  {
    if (!is_null($content))
      { $this->setContent($content); }
    if (!is_null($href))
      { $this->setHref($href); }
  }

}

// abbr – abbreviation
// http://www.w3.org/TR/html-markup/abbr.html
class abbr extends html
{
  protected $TAG = 'abbr';

//   function setHref($href)
//   {// linkify the abbreviation
//     $a = new a($this->getContent());
//     $a->setHref($href);
//     $this->setOutput($a->buildOutput());
//   }

  /*static */function buildOutput($content = null)
  {
    if (!is_null($this->getHref()))
    {// complex output
      $a = new a($this->getContent());
      $a->setHref($this->getHref());
      return $a->buildOutput();
    } else // simple abbr
      { return parent::buildOutput(); }
  }

  function __construct($content = null, $title = null, $href = null)
  {
    if (!is_null($content))
      { $this->setContent($content); }
    if (!is_null($title))
      { $this->setTitle(ucfirst($title)); }
    if (!is_null($href))
      { $this->setHref($href); }
  }
}

// span – inline text
// http://www.w3.org/TR/html-markup/span.html
class span extends html
{
  protected $TAG = 'span';

  function __construct($content = null)
  {
    if (!is_null($content))
      { $this->setContent($content); }
  }

}


// del – a removal from the document.
// http://www.w3.org/TR/html-markup/del.html
class del extends html
{
  protected $TAG = 'del';

  protected $AttributesExtension = array(
    'cite' => null,
    'datetime' => null,
  );

// @cite
  function setCite($value)
    { $this->setAttribute('cite', $value); }
  function getCite()
    { return $this->getAttribute('cite'); }

// @datetime
  function setDatetime($value)
    { $this->setAttribute('datetime', $value); }
  function getDatetime()
    { return $this->getAttribute('datetime'); }


  function __construct($content = null)
  {
    $this->extendHtmlAttribute( $this->AttributesExtension );
    if (!is_null($content))
      { $this->setContent($content); }
  }

}

?>