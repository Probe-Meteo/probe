<?php	//	clear;php5 -f ./Station.phpc
// file_put_contents ('../../WsWds.station.conf',var_export(array('VP2-Gtd'=>array('IP'=>'VP2','Port'=>22222,'type'=>'VP2-IP')), true));

$vp2_gtd = new station('VP2-Gtd');
$vp2_gtd -> initConnection();
$vp2_gtd -> Waiting (0, 'Initialisation de connexion : OK!');
// $vp2_gtd -> Get_HILOWS_Raw();
// $vp2_gtd -> Get_LOOP_Raw(3);
$vp2_gtd -> Get_DPMAFT_Raw();
$vp2_gtd -> closeConnection();
$vp2_gtd -> Waiting (0, 'Fermeture de connexion : OK!');

class station
{
	protected $IP=NULL; //
	protected $Port=NULL;   //
	protected $this->fp=NULL;
	protected $this->symb=NULL;
	protected $retry=3; // number of attempts before aborting
	protected $backLightScreen=false; // actual state of backlight screen
	protected $table = array(
	0x0,  0x1021,  0x2042,  0x3063,  0x4084,  0x50a5,  0x60c6,  0x70e7,
	0x8108,  0x9129,  0xa14a,  0xb16b,  0xc18c,  0xd1ad,  0xe1ce,  0xf1ef,
	0x1231,  0x210,  0x3273,  0x2252,  0x52b5,  0x4294,  0x72f7,  0x62d6,
	0x9339,  0x8318,  0xb37b,  0xa35a,  0xd3bd,  0xc39c,  0xf3ff,  0xe3de,
	0x2462,  0x3443,  0x420,  0x1401,  0x64e6,  0x74c7,  0x44a4,  0x5485,
	0xa56a,  0xb54b,  0x8528,  0x9509,  0xe5ee,  0xf5cf,  0xc5ac,  0xd58d,
	0x3653,  0x2672,  0x1611,  0x630,  0x76d7,  0x66f6,  0x5695,  0x46b4,
	0xb75b,  0xa77a,  0x9719,  0x8738,  0xf7df,  0xe7fe,  0xd79d,  0xc7bc,
	0x48c4,  0x58e5,  0x6886,  0x78a7,  0x840,  0x1861,  0x2802,  0x3823,
	0xc9cc,  0xd9ed,  0xe98e,  0xf9af,  0x8948,  0x9969,  0xa90a,  0xb92b,
	0x5af5,  0x4ad4,  0x7ab7,  0x6a96,  0x1a71,  0xa50,  0x3a33,  0x2a12,
	0xdbfd,  0xcbdc,  0xfbbf,  0xeb9e,  0x9b79,  0x8b58,  0xbb3b,  0xab1a,
	0x6ca6,  0x7c87,  0x4ce4,  0x5cc5,  0x2c22,  0x3c03,  0xc60,  0x1c41,
	0xedae,  0xfd8f,  0xcdec,  0xddcd,  0xad2a,  0xbd0b,  0x8d68,  0x9d49,
	0x7e97,  0x6eb6,  0x5ed5,  0x4ef4,  0x3e13,  0x2e32,  0x1e51,  0xe70,
	0xff9f,  0xefbe,  0xdfdd,  0xcffc,  0xbf1b,  0xaf3a,  0x9f59,  0x8f78,
	0x9188,  0x81a9,  0xb1ca,  0xa1eb,  0xd10c,  0xc12d,  0xf14e,  0xe16f,
	0x1080,  0xa1,  0x30c2,  0x20e3,  0x5004,  0x4025,  0x7046,  0x6067,
	0x83b9,  0x9398,  0xa3fb,  0xb3da,  0xc33d,  0xd31c,  0xe37f,  0xf35e,
	0x2b1,  0x1290,  0x22f3,  0x32d2,  0x4235,  0x5214,  0x6277,  0x7256,
	0xb5ea,  0xa5cb,  0x95a8,  0x8589,  0xf56e,  0xe54f,  0xd52c,  0xc50d,
	0x34e2,  0x24c3,  0x14a0,  0x481,  0x7466,  0x6447,  0x5424,  0x4405,
	0xa7db,  0xb7fa,  0x8799,  0x97b8,  0xe75f,  0xf77e,  0xc71d,  0xd73c,
	0x26d3,  0x36f2,  0x691,  0x16b0,  0x6657,  0x7676,  0x4615,  0x5634,
	0xd94c,  0xc96d,  0xf90e,  0xe92f,  0x99c8,  0x89e9,  0xb98a,  0xa9ab,
	0x5844,  0x4865,  0x7806,  0x6827,  0x18c0,  0x8e1,  0x3882,  0x28a3,
	0xcb7d,  0xdb5c,  0xeb3f,  0xfb1e,  0x8bf9,  0x9bd8,  0xabbb,  0xbb9a,
	0x4a75,  0x5a54,  0x6a37,  0x7a16,  0xaf1,  0x1ad0,  0x2ab3,  0x3a92,
	0xfd2e,  0xed0f,  0xdd6c,  0xcd4d,  0xbdaa,  0xad8b,  0x9de8,  0x8dc9,
	0x7c26,  0x6c07,  0x5c64,  0x4c45,  0x3ca2,  0x2c83,  0x1ce0,  0xcc1,
	0xef1f,  0xff3e,  0xcf5d,  0xdf7c,  0xaf9b,  0xbfba,  0x8fd9,  0x9ff8,
	0x6e17,  0x7e36,  0x4e55,  0x5e74,  0x2e93,  0x3eb2,  0xed1,  0x1ef0);
	
	function __construct($name)
	{
		$this->set_value($name);
		$this->symb = array (
		'CR' => chr(0x0D), // \r
		'LF' => chr(0x0A), // \n
		'LFCR' => chr(0x0A).chr(0x0D),
		'ESC' => chr(0x1b), // Echap
		'ACK' => chr(0x06), // Compris
		'NAK' => chr(0x21), // Pas Compris
		'CANCEL' => chr(0x18), // Bad CRC Code
		'_OK_' => "\n\rOK\n\r");
	}
	function set_value($name)
	{
		$arrayconf = eval('return '.file_get_contents('../../WsWds.station.conf').';');
		if ($arrayconf[$name]['type']=='VP2-IP')
		{
			$this->IP=( $arrayconf[$name]['IP'] );
			$this->Port=( $arrayconf[$name]['Port'] );
			return true;
		}
		return false;
	}
	function CalculateCRC($ptr)
	{
		$crc = 0x0000;
		settype($crc, "integer");
		for ($i = 0; $i < strlen($ptr); $i++)
		{
			$crc =  $this->table[(($crc>>8) ^ ord($ptr[$i]))] ^ (($crc<<8) & 0x00FFFF);
		}
// settype($crc, "string");
// echo $crc."\n";
		return $crc; // 		return $this->HexToDec($crc);
	}
	function Waiting ($s=10, $msg = 'Waiting and retry')
	{
		$w = '-\|/';
		if ($s==0)
			echo "\r".date('Y/m/d H:i:s u')."\t".$msg;
		for ($j=0;$j<$s;$j++)
		{
			usleep(100000);
			echo "\r".date('Y/m/d H:i:s u')."\t".$msg.' '.$w[$j%4];
		}
		echo "\n";
	}
	function HexToDec($hex)
	{
		return hexdec(bin2hex($hex));
	}
	function initConnection()
	{
		$this->fp = fsockopen($this->IP, $this->Port);
		stream_set_timeout($this->fp, 0, 2500000);
		if ($this->fp)
		{
			if ($this->wakeUp())
			{
				$this->toggleBacklight(1);
				return true;
			}
		}
		return false;
	}
	protected function wakeUp()
	{
		for ($i=0;$i<=$this->retry;$i++)
		{
			fwrite ($this->fp,$this->symb['LF']);
			if (fread($this->fp,6)==$this->symb['LFCR'])
				return true;
			usleep(1200000);
		}
		return false;
	}
	protected function toggleBacklight($force=-1)
	{
		if ($force==-1)
		{
			fwrite ($this->fp,'LAMPS '.(($this->backLightScreen)?'0':'1').$this->symb['LF']);
		}
		else
		{
			fwrite ($this->fp,'LAMPS '.($force?'1':'0').$this->symb['LF']);
		}
		if (fread($this->fp,6)==$this->symb['_OK_'])
		{
			if ($force==-1)$this->backLightScreen = !$this->backLightScreen;
			else $this->backLightScreen = $force;
			return TRUE;
		}
		return FALSE;
	}
	function CloseConnection()
	{
		$this->toggleBacklight(0);
		fclose($this->fp);
		return true;
	}
	function Get_LOOP_Raw($nbr=1)
	{
		$_NBR = $nbr;
		for ($i=0;$i<=$this->retry;$i++)
		{
			fwrite ($this->fp, "LOOP $nbr\n");
			$r = fread($this->fp, 1);
			if ($r == $this->symb['ACK'])
			{
				while ($nbr-- > 0)
				{
					$LOOP = fread($this->fp, 99);
					$crc = $this->CalculateCRC($LOOP);
					if ($crc==0x0000)
					{
						$LOOP = substr($LOOP,0,-2);
						// fonction de conversion...
						$this->Waiting (0,'LOOP : Calcul de CRC confirme');
						file_put_contents('./VP2-dataLOOP['.($_NBR-$nbr).'].brut',$LOOP);
					}
					else	$this->Waiting (0,'LOOP : Erreur de CRC : '.($crc));
					if ($nbr > 0) sleep(1);
				}
				return true;
			}
			else if ($r == $this->symb['NAK'])
			{
				$this->Waiting (0,'LOOP : Erreur de NAK');
			}
			else
			{
				fwrite ($this->fp, $this->symb['CR']);
				fread($this->fp, 999);
				if ($i<$this->retry)
					$this->Waiting (0,'LOOP : Erreur Autre');
			}
		}
		return true;
	}
	function Get_HILOWS_Raw()
	{
		for ($i=0;$i<=$this->retry;$i++)
		{
			fwrite ($this->fp, "HILOWS\n");
			$r = fread($this->fp, 1);
			if ($r == $this->symb['ACK'])
			{
				$HILOWS = fread($this->fp, 438);
				$crc = $this->CalculateCRC($HILOWS);
				if ($crc==0x0000)
				{
					$HILOWS = substr($HILOWS,0,-2);
					// echo date('Y/m/d H:i:s u')."\t".'Traitement des valeurs Maxi et Mini...'."\n";
					// fonction de conversion...
					$this->Waiting (0,'HILOWS : Calcul de CRC confirme');
					file_put_contents("./VP2-dataHILOWS.brut",$HILOWS);
					return true;
				}
				else	$this->Waiting (0,'HILOWS : Erreur de CRC : '.($crc));
//				$this->Waiting (0,($this->CalculateCRC(chr(0xC6).chr(0xCE).chr(0xA2).chr(0x03).chr(0xE2).chr(0xB4))));
			}
			else if ($r == $this->symb['NAK'])
			{
				$this->Waiting (0,'HILOWS : Erreur de NAK');
			}
			else
			{
				// echo date('Y/m/d H:i:s u')."\t".'HILOWS NULL  '.'$r = 0x'.dechex($r)."\n";
				fread($this->fp, 999);
				if ($i<$this->retry)
					$this->Waiting (0,'HILOWS : Erreur Autre');

			}
		}
		return true;
	}
	
	function Get_TIME_Raw()
	{
		for ($i=0;$i<=$this->retry;$i++)
		{}
		return true;
	}
	function Get_DMPAFT_Raw()
	{
		for ($i=0;$i<=$this->retry;$i++)
		{
fwrite($this->fp,"DMPAFT\n");
Waiting (4,'Recuperation des Archives.');
$r = fread($this->fp, 1);
if ($r == $this->symb['ACK'])
{
	$d = DMPAFT_SetVP2Date(date('Y/m/d H:00:00'));
	fwrite($this->fp, $d[0].$d[1].$d[2].$d[3]);
	Waiting (4,'Demande d archives');
	$crc = $this->CalculateCRC($d[0].$d[1].$d[2].$d[3]);
	fwrite($this->fp, $crc[0].$crc[1]);
	Waiting (12,'confirmation par CRC');
	$r = fread($this->fp, 1);
	if ($r == $this->symb['ACK'])
	{
		Waiting (1,'CRC Confirme, Recuperation des Archives');
		$r = fread($this->fp, 6);
//				echo strlen($r).' - '.$n.'  = '.bin2hex($n).' - '.$p.'  = '.bin2hex($p).' - ';
		$crc = $this->CalculateCRC($r);
//				echo $r.'        = 0x'.bin2hex($r)."\n";
//				echo $crc['all'].'        = 0x'.bin2hex($crc['all'])."\n";
//				echo $crc[0].' '.$crc[1].'        = 0x'.dechex(ord($crc[0])).dechex(ord($crc[1]))."\n";
		if ($crc['Confirm'])
		{
			$n = ($r >> 32) & 0xffff ;
			$p = ($r >> 16) & 0xffff;
			//$n = (ord($r[0])<<8)+ord($r[1]);
			//$p = (ord($r[2])<<8)+ord($r[3]);
			echo date('Y/m/d H:i:s u')."\t".'Nombre de Pages : '.$n.'. debute aux data : '.$p.".\n";
			fwrite($this->fp, $this->symb['ACK']);
			for ($j=0;$j<$n && $j<5;$j++)
			{
				$archives[$j] = fread($this->fp, 267);
				Waiting (4,'Download ARCHIVE : '.$j);
				if ($this->CalculateCRC($archives[$j]))
				{
					Waiting (4,'ARCHIVE #'.$j.' du '.DMPAFT_GetVP2Date(array($archives[$j][1],$archives[$j][2],$archives[$j][3],$archives[$j][4])).' valide');
					fwrite($this->fp, $this->symb['ACK']);
				}
				else
				{
					fwrite($this->fp, $this->symb['NAK']);
					Waiting (4,'ARCHIVE #'.$j.' invalide, retry.');
				}
			}
			fwrite($this->fp, $this->symb['ESC']);
		}
		else if ($r == $this->symb['NAK'])
			echo date('Y/m/d H:i:s u')."\t".'DMPAFT Pages NAK'."\n";
		else
		{
			echo date('Y/m/d H:i:s u')."\t".'DMPAFT Pages NULL  '.'$r = 0x'.dechex($r)."\n";
			fread($this->fp, 999); // vidange
			if ($i<$retry)	Waiting (8);
		}
	}
	else if ($r == $this->symb['NAK'])
		echo date('Y/m/d H:i:s u')."\t".'DMPAFT Date NAK'."\n";
	else
	{
		echo date('Y/m/d H:i:s u')."\t".'DMPAFT Date NULL  '.'$r = 0x'.dechex($r)."\n";
		fread($this->fp, 999); // vidange
		if ($i<$retry)	Waiting (8);
	}
	$skip = true;
}
else if ($r == $this->symb['NAK'])
	echo date('Y/m/d H:i:s u')."\t".'DMPAFT NAK'."\n";
else
{
	echo date('Y/m/d H:i:s u')."\t".'DMPAFT NULL  '.'$r = 0x'.dechex($r)."\n";
	fread($this->fp, 999); // vidange
	if ($i<$retry)	Waiting (8);
}

		}
		return true;
	}
	protected function Date2Human()
	{
		return true;
	}
	protected function Human2Date()
	{
		return true;
	}
	
}


?>