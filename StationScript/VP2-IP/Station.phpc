<?php	//	clear;php5 -f ./Station.phpc

class station
{
	protected $KeyConf=NULL;	// FileConf of this Vantage Pro2
	protected $fp=NULL;	// Pointer of VP2 Connection
	protected $symb=NULL;
	protected $StationFolder=NULL;
	protected $StationConfig=NULL;
	protected $retry=3;	// number of attempts before aborting
	protected $backLightScreen=FALSE; // actual state of backlight screen
	protected $table = array(
	0x0,  0x1021,  0x2042,  0x3063,  0x4084,  0x50a5,  0x60c6,  0x70e7,
	0x8108,  0x9129,  0xa14a,  0xb16b,  0xc18c,  0xd1ad,  0xe1ce,  0xf1ef,
	0x1231,  0x210,  0x3273,  0x2252,  0x52b5,  0x4294,  0x72f7,  0x62d6,
	0x9339,  0x8318,  0xb37b,  0xa35a,  0xd3bd,  0xc39c,  0xf3ff,  0xe3de,
	0x2462,  0x3443,  0x420,  0x1401,  0x64e6,  0x74c7,  0x44a4,  0x5485,
	0xa56a,  0xb54b,  0x8528,  0x9509,  0xe5ee,  0xf5cf,  0xc5ac,  0xd58d,
	0x3653,  0x2672,  0x1611,  0x630,  0x76d7,  0x66f6,  0x5695,  0x46b4,
	0xb75b,  0xa77a,  0x9719,  0x8738,  0xf7df,  0xe7fe,  0xd79d,  0xc7bc,
	0x48c4,  0x58e5,  0x6886,  0x78a7,  0x840,  0x1861,  0x2802,  0x3823,
	0xc9cc,  0xd9ed,  0xe98e,  0xf9af,  0x8948,  0x9969,  0xa90a,  0xb92b,
	0x5af5,  0x4ad4,  0x7ab7,  0x6a96,  0x1a71,  0xa50,  0x3a33,  0x2a12,
	0xdbfd,  0xcbdc,  0xfbbf,  0xeb9e,  0x9b79,  0x8b58,  0xbb3b,  0xab1a,
	0x6ca6,  0x7c87,  0x4ce4,  0x5cc5,  0x2c22,  0x3c03,  0xc60,  0x1c41,
	0xedae,  0xfd8f,  0xcdec,  0xddcd,  0xad2a,  0xbd0b,  0x8d68,  0x9d49,
	0x7e97,  0x6eb6,  0x5ed5,  0x4ef4,  0x3e13,  0x2e32,  0x1e51,  0xe70,
	0xff9f,  0xefbe,  0xdfdd,  0xcffc,  0xbf1b,  0xaf3a,  0x9f59,  0x8f78,
	0x9188,  0x81a9,  0xb1ca,  0xa1eb,  0xd10c,  0xc12d,  0xf14e,  0xe16f,
	0x1080,  0xa1,  0x30c2,  0x20e3,  0x5004,  0x4025,  0x7046,  0x6067,
	0x83b9,  0x9398,  0xa3fb,  0xb3da,  0xc33d,  0xd31c,  0xe37f,  0xf35e,
	0x2b1,  0x1290,  0x22f3,  0x32d2,  0x4235,  0x5214,  0x6277,  0x7256,
	0xb5ea,  0xa5cb,  0x95a8,  0x8589,  0xf56e,  0xe54f,  0xd52c,  0xc50d,
	0x34e2,  0x24c3,  0x14a0,  0x481,  0x7466,  0x6447,  0x5424,  0x4405,
	0xa7db,  0xb7fa,  0x8799,  0x97b8,  0xe75f,  0xf77e,  0xc71d,  0xd73c,
	0x26d3,  0x36f2,  0x691,  0x16b0,  0x6657,  0x7676,  0x4615,  0x5634,
	0xd94c,  0xc96d,  0xf90e,  0xe92f,  0x99c8,  0x89e9,  0xb98a,  0xa9ab,
	0x5844,  0x4865,  0x7806,  0x6827,  0x18c0,  0x8e1,  0x3882,  0x28a3,
	0xcb7d,  0xdb5c,  0xeb3f,  0xfb1e,  0x8bf9,  0x9bd8,  0xabbb,  0xbb9a,
	0x4a75,  0x5a54,  0x6a37,  0x7a16,  0xaf1,  0x1ad0,  0x2ab3,  0x3a92,
	0xfd2e,  0xed0f,  0xdd6c,  0xcd4d,  0xbdaa,  0xad8b,  0x9de8,  0x8dc9,
	0x7c26,  0x6c07,  0x5c64,  0x4c45,  0x3ca2,  0x2c83,  0x1ce0,  0xcc1,
	0xef1f,  0xff3e,  0xcf5d,  0xdf7c,  0xaf9b,  0xbfba,  0x8fd9,  0x9ff8,
	0x6e17,  0x7e36,  0x4e55,  0x5e74,  0x2e93,  0x3eb2,  0xed1,  0x1ef0);
	public $EEPROM = array( // Docs pages 35 to 38
	'BAR_GAIN'	=>		array('pos' => '01','len' => 2, 'eval'=>'(($val>>15)?(($val ^ 0xFFFF)+1)*(-1):$val)',	'unit'=>'*'),
	'BAR_OFFSET'	=>	array('pos' => '03','len' => 2, 'eval'=>'(($val>>15)?(($val ^ 0xFFFF)+1)*(-1):$val)',	'unit'=>'+'),
	'BAR_CAL'	=>		array('pos' => '05','len' => 2, 'eval'=>'(($val>>15)?(($val ^ 0xFFFF)+1)*(-1):$val)',	'unit'=>''),
	'LATITUDE'	=>		array('pos' => '0B','len' => 2, 'eval'=>'(($val>>15)?(($val ^ 0xFFFF)+1)*(-1):$val)/10',	'unit'=>'°'),
	'LONGITUDE'	=>		array('pos' => '0D','len' => 2, 'eval'=>'(($val>>15)?(($val ^ 0xFFFF)+1)*(-1):$val)/10',	'unit'=>'°'),
	'ELEVATION'	=>		array('pos' => '0F','len' => 2, 'eval'=>'(($val>>15)?(($val ^ 0xFFFF)+1)*(-1):$val)',	'unit'=>'feet'),
	'TIME_ZONE'	=>		array('pos' => '11','len' => 1, 'eval'=>'(($val>>7)?(($val ^ 0xFF)+1)*(-1):$val)',	'unit'=>''),
	'GTM_OFFSET'	=>	array('pos' => '14','len' => 2, 'eval'=>'(int)($val/100).":".str_pad(($val%100),2,"0",STR_PAD_LEFT)',	'unit'=>'h:mm'),
	'GTM_OR_ZONE'	=>	array('pos' => '16','len' => 1, 'eval'=>'$val?"GTM":"ZONE"',	'unit'=>''),
	'UNIT_BITS'	=>		array('pos' => '29','len' => 1, 'eval'=>'array_combine(array("Wind","Rain","Elev","Temp","Barom"),
											array(
												!(($val&0xC0)>>6)?"mph":(((($val&0xC0)>>6)==1)?"m/s":(((($val&0xC0)>>6)==2)?"Km/h":"Knots")),
												(($val&0x20)>>5)?"mm":"in",
												(($val&0x10)>>4)?"m":"ft",
												!(($val&0x0C)>>2)?"1 °F":(((($val&0x0C)>>2)==1)?"0.1 °F":(((($val&0x0C)>>2)==2)?"1 °C":"0.1 °C")),
												!($val&0x03)?"0.01 in":((($val&0x03)==1)?"0.1 mm":((($val&0x03)==2)?"0.1 hpa":"0.1 mB")),
											))',	'unit'=>'Bits'),
	'SETUP_BITS'=>		array('pos' => '2B','len' => 1, 'eval'=>'array_combine(array("Longitude:","Latitude:","RainCupSize","WinCupSize","DayMonth","AM/PM","12/24"),
											array(
												(($val&0x80)>>7)?"East":"West",
												(($val&0x40)>>6)?"Nord":"South",
												!(($val&30)>>4)?"0.01 in":(((($val&30)>>4)==1)?"0.2 mm":"0.1 mm"),
												(($val&0x08)>>3)?"Large":"Small",
												(($val&0x04)>>2)?"Day/Month":"Month/Day",
												(($val&0x02)>>1)?"AM":"PM",
												($val&0x01)?"24h":"AM/PM",
											))',	'unit'=>'Bits'),
	'RAIN_SEASON_START'=>	array('pos' => '2C','len' => 1, 'eval'=>'$val',	'unit'=>'month'),
	'ARCHIVE_PERIOD'	=>	array('pos' => '2D','len' => 1, 'eval'=>'$val',	'unit'=>'min'),
	'TEMP_IN_CAL'	=>	array('pos' => '32','len' => 1, 'eval'=>'(($val>>7)?(($val ^ 0xFF)+1)*(-1):$val)/10',	'unit'=>'°F'),
	'TEMP_OUT_CAL'	=>	array('pos' => '34','len' => 1, 'eval'=>'(($val>>7)?(($val ^ 0xFF)+1)*(-1):$val)/10',	'unit'=>'°F'),
	'HUM_IN_CAL'	=>	array('pos' => '44','len' => 1, 'eval'=>'$val',	'unit'=>'%'),
	'WIND_DIR_CAL'	=>	array('pos' => '4D','len' => 2, 'eval'=>'(($val>>15)?(($val ^ 0xFFFF)+1)*(-1):$val)',	'unit'=>'degrees'),
	'AVERAGE_TEMP'	=>	array('pos' => '0FFC','len' => 1, 'eval'=>'$val?"Last":"Average"',	'unit'=>' '),
	'VER'			=>	'substr($val,0,-2)',
	'NVER'		=>	'substr($val,0,-2)',
	'RXCHECK'		=>	'array_combine(array("Received","Missed","Resync","LargestReceived","CRC-Error"),explode(" ",substr($val,0,-2)))',
	'BARDATA'		=>	'explode(chr(0x0A).chr(0x0D),$val)',
// 	''	=>		array('pos' => '','len' => 1, 'eval'=>'',	'unit'=>''),
	);

	function __construct($stationConfig, $name)	{
		$this->setKeyConf($name);
		$this->setStationConfig($stationConfig);
		$this->setStationFolder( dirname(__FILE__).DIRECTORY_SEPARATOR );
		$this->symb = array (
						'CR' => chr(0x0D), // \r
						'LF' => chr(0x0A), // \n
						'LFCR' => chr(0x0A).chr(0x0D),
						'ESC' => chr(0x1b), // Echap
						'ACK' => chr(0x06), // Compris
						'NAK' => chr(0x21), // Pas Compris
						'CANCEL' => chr(0x18), // Bad CRC Code
						'_OK_' => "\n\rOK\n\r"
		);
	}
	function CalculateCRC($ptr)	{
		$crc = 0x0000;
		settype($crc, "integer");
		for ($i = 0; $i < strlen($ptr); $i++)
		{
			$crc =  $this->table[(($crc>>8) ^ ord($ptr[$i]))] ^ (($crc<<8) & 0x00FFFF);
// 			$this->waiting(0,ord($ptr[$i]).' : '.dechex($this->table[(($crc>>8) ^ ord($ptr[$i]))]).' > '.dechex($crc>>8).' '.dechex($crc&0xff));
		}
		return !$crc?$crc:chr($crc>>8).chr($crc&0xff);
	}
	function Waiting ($s=10, $msg = 'Waiting and retry')	{
		$w = '-\|/';
		if ($s==0)
			echo "\r".date('Y/m/d H:i:s u')."\t".$msg;
		for ($j=0;$j<$s;$j++)
		{
			usleep(100000);
			echo "\r".date('Y/m/d H:i:s u')."\t".$msg.' '.$w[$j%4];
		}
		echo "\n";
	}
	function hexToDec($hex)	{
		return hexdec(bin2hex($hex));
	}
	public function initConnection()	{
		$errno = 0;
		$this->fp = @fsockopen(
			$this->getStationIP(),
			$this->getStationPort(),
			&$errno
		);

		if ($this->fp && $errno==0)
		{
			stream_set_timeout($this->fp, 0, 2500000);
			if ($this->wakeUp())
			{
				$this->toggleBacklight(1);
				return TRUE;
			}
		}
		return FALSE;
	}
	protected function wakeUp()	{
		for ($i=0;$i<=$this->retry;$i++)
		{
			fwrite ($this->fp,$this->symb['LF']);

			if (fread($this->fp,6)==$this->symb['LFCR'])
				return TRUE;
			usleep(1200000);
		}
		return FALSE;
	}
	protected function toggleBacklight($force=-1) {
		if ($force==-1)
		{
			fwrite ($this->fp,'LAMPS '.(($this->backLightScreen)?'0':'1').$this->symb['LF']);
		} else
		{
			fwrite ($this->fp,'LAMPS '.($force?'1':'0').$this->symb['LF']);
		}
		if (fread($this->fp,6)==$this->symb['_OK_'])
		{
			if ($force==-1)$this->backLightScreen = !$this->backLightScreen;
			else $this->backLightScreen = $force;
			return TRUE;
		}
		return FALSE;
	}
	function Read_Configs() {
		$cmd = array();
		foreach($this->EEPROM as $key=>$val)
		{
			if (is_array($val))
				$cmd[$key] = $this->GET_EEPROM($key);
			else
				$cmd[$key] = $this->GET_info($key);
			if ($cmd[$key])
			{
				$this->StationConfig[$this->getKeyConf()]['Last_Read_Config'] = date('Y/m/d H:i:s');
				$this->StationConfig[$this->getKeyConf()][$key] = $cmd[$key];
				$this->SaveConfs();
			}
		}
		return $cmd;
	}
	function PUT_infos($cmd) { // $cmd = array('PUTRAIN'=>'', 'PUTET'=>'', 'BAR'=>'', 'SETPER'=>'');
		foreach($cmd as $key=>$val)
		{
			$cmd[$key] = $this-PUT_info($key);
		}
		return $cmd;
	}
	private function GET_info($cmd) { // VER, NVER, RXCHECK, BARDATA
		fwrite ($this->fp, strtoupper($cmd)."\n");
		if (fread($this->fp,6)==$this->symb['_OK_'])
		{
			$val = fread($this->fp,99);
			return eval('return '.$this->EEPROM[$cmd].';');
		}
		return FALSE;
	}
	function GET_EEPROM($cmd) {
		fwrite ($this->fp, strtoupper('EEBRD '.$this->EEPROM[$cmd]['pos']).' '.$this->EEPROM[$cmd]['len']."\n");
		$r = fread($this->fp, 1);
		if ($r == $this->symb['ACK'])
		{
			$EEBRD = fread($this->fp, $this->EEPROM[$cmd]['len']+2);
			if (strlen($EEBRD)==$this->EEPROM[$cmd]['len']+2 && !$this->CalculateCRC($EEBRD))
			{
				$val = $this->hexToDec(strrev(substr($EEBRD, 0,-2)));
// 				$this->Waiting (0, decbin($val));
				return eval('return '.$this->EEPROM[$cmd]['eval'].';');
			}
			return null;
		}
		return FALSE;
	}
	private function PUT_info($cmd) { // PUTRAIN, PUTET, BAR=P H, SETPER
		fwrite ($this->fp, strtoupper($cmd)."\n");
		$r = fread($this->fp, 1);
		if ($r == $this->symb['ACK'])
		{
			return true;
		}
		return FALSE;
	}
	function CloseConnection()	{
		$this->StationConfig[$this->getKeyConf()]['Last_Connected'] = date('Y/m/d H:i:s');
		$this->SaveConfs();
		$this->toggleBacklight(0);
		fclose($this->fp);
		return TRUE;
	}
	function Get_LOOP_Raw($nbr=1)	{
		$_NBR = $nbr;
		fwrite ($this->fp, "LOOP $nbr\n");
		$r = fread($this->fp, 1);
		if ($r == $this->symb['ACK'])
		{
			while ($nbr-- > 0)
			{
				$LOOP = fread($this->fp, 99);
				if (strlen($LOOP)==99 && !$this->CalculateCRC($LOOP))
				{
					$LOOP = substr($LOOP,0,-2);
					$this->Waiting (0,'LOOP : Download the current Values');
// 					file_put_contents($this->StationFolder.'../../ExportedData/LOOP['.($_NBR-$nbr).'].brut',$LOOP);
					$this->StationConfig[$this->getKeyConf()]['Last_LOOP'] = date('Y/m/d H:i:s');
					$this->SaveConfs();
/** ################################################################################################################################
Ici on appelera succesivement 3 functions :
$LOOP = chaine de 97 caractères de long.
- Convert to Human redable ();

	prendra comme parametre : $LOOP , et me retourne un tableau avec les valeurs brutes dans leur unitée par defaut. (Edouard)
- Convert to Unit of SystemInternational ();
	prendra comme parametre le tableau precedant et converti et corrige chaque valeurs. (alban)
- Write Values ();
	prendra comme parametre le tabeau SI et l´enregistre dans un fichier qui sera repris par l´interface WEB. (alban)
################################################################################################################################  **/
				}
				else
					$this->Waiting (0,'LOOP : Erreur de CRC');
				if ($nbr > 0) sleep(1);
			}
			return true;
		}
		else if ($r == $this->symb['NAK'])
		{
			$this->Waiting (0,'LOOP : Erreur de NAK');
		}
		else
		{
			fwrite ($this->fp, $this->symb['CR']); // Cancel this command
			fread($this->fp, 999);
			$this->Waiting (0,'LOOP : unknown Error');
		}
		return true;
	}
	function Get_HILOWS_Raw()	{
		fwrite ($this->fp, "HILOWS\n");
		$r = fread($this->fp, 1);
		if ($r == $this->symb['ACK'])
		{
			$HILOWS = fread($this->fp, 438);
			if (strlen($HILOWS)==438 && ($this->CalculateCRC($HILOWS))==0x0000)
			{
				$HILOWS = substr($HILOWS,0,-2);
				$this->Waiting (0,'HILOWS : Download Mini and Maxi');
// 				file_put_contents($this->StationFolder.'../../ExportedData/HILOWS.brut',$HILOWS);
				$this->StationConfig[$this->getKeyConf()]['Last_HILOWS'] = date('Y/m/d H:i:s');
				$this->SaveConfs();
/** ################################################################################################################################
Ici on appelera succesivement 3 functions :
- Convert to Human redable ();
	prendra comme parametre : $HILOWS , et me retourne un tableau avec les valeurs brutes dans leur unitée par defaut. (Edouard)
- Convert to Unit of SystemInternational ();
	prendra comme parametre le tableau precedant et converti et corrige chaque valeurs. (alban)
- Write Values ();
	prendra comme parametre le tabeau SI et l´enregistre dans un fichier et dans une base SQL. (Alban et edouard)
################################################################################################################################  **/
				return true;
			}
			else
				$this->Waiting (0,'HILOWS : Erreur de CRC');
		}
		else if ($r == $this->symb['NAK'])
		{
			$this->Waiting (0,'HILOWS : Erreur de NAK');
		}
		else
		{
			fread($this->fp, 999);
				$this->Waiting (0,'HILOWS : unknown Error');
		}
		return true;
	}
	function fetchStationTime()	{// 0x35 16 00 1d 0c 6f  0x7c 44  ==  2011/12/29 00:22:53
		fwrite ($this->fp, "GETTIME\n");
		$r = fread($this->fp, 1);
		if ($r == $this->symb['ACK'])
		{
			$GETTIME = fread($this->fp, 8);
			if (strlen($GETTIME)==8 && $this->CalculateCRC($GETTIME)==0x0000)
			{
				$GETTIME = (ord($GETTIME[5])+1900).'/'.str_pad(ord($GETTIME[4]),2,'0',STR_PAD_LEFT).'/'.str_pad(ord($GETTIME[3]),2,'0',STR_PAD_LEFT).' '.str_pad(ord($GETTIME[2]),2,'0',STR_PAD_LEFT).':'.str_pad(ord($GETTIME[1]),2,'0',STR_PAD_LEFT).':'.str_pad(ord($GETTIME[0]),2,'0',STR_PAD_LEFT);
				$this->Waiting (0, 'Real Time : '.date('Y/m/d H:i:s').' vs GETTIME : '.$GETTIME);
				return $GETTIME;
			}
			else
				$this->Waiting (0,'GETTIME : Erreur de CRC');
		}
		else
		{
			fread($this->fp, 999);
				$this->Waiting (0,'GETTIME : unknown Error');
		}
		return false;
	}
	function updateStationTime()	{// 0x35 16 00 1d 0c 6f  0x7c 44  ==  2011/12/29 00:22:53
		fwrite ($this->fp, "SETTIME\n");
		$r = fread($this->fp, 1);
		if ($r == $this->symb['ACK'])
		{
			list($_date, $_clock) = explode(' ', date('Y/m/d H:i:s'));
			list($y,$m,$d) = explode('/', $_date);
			list($h,$i,$s) = explode(':', $_clock);
			$SETTIME = chr($s).chr($i).chr($h).chr($d).chr($m).chr($y-1900);
			$crc = $this->CalculateCRC($SETTIME);
			fwrite ($this->fp, $SETTIME.$crc);
			$r = fread($this->fp, 1);
			if ($r == $this->symb['ACK'])
			{
				$this->Waiting (0,'SETTIME : '.$_date.' '.$_clock);
				$this->StationConfig[$this->getKeyConf()]['Last_SETTIME'] = $_date.' '.$_clock;
				$this->SaveConfs();
				return $_date.' '.$_clock;
			}
			else
				$this->Waiting (0,'SETTIME : invalid date.');
		}
		else
		{
			fread($this->fp, 999);
				$this->Waiting (0,'SETTIME : unknown Error');
		}
		return FALSE;
	}
	function DMPAFT_SetVP2Date ($StrDate)	{// 2003/06/19 09:30:00  =>  0x03A2 0x06D3
		$y = substr($StrDate, 0, 4);
		$m = substr($StrDate, 5, 2);
		$d = substr($StrDate, 8, 2);
		$h = substr($StrDate, -8, 2);
		$min = substr($StrDate, -5, 2);
		$s = substr($StrDate, -2);
		$d = ((($y-2000)*512+$m*32+$d)<<16) + ($h*100+$min);							// settype($d, 'integer');
// 		$d = chr(($d&0xff000000)>>24).chr(($d&0xff0000)>>16).chr(($d&0xff00)>>8).chr($d&0xff);	// settype($d, 'string');
		$d = chr(($d&0xff0000)>>16).chr(($d&0xff000000)>>24).chr($d&0xff).chr(($d&0xff00)>>8);	// Reverse version
		return $d;
	}
	function DMPAFT_GetVP2Date ($VP2Date)	{// 2003/06/19 09:30:00  <=  0x03A2 0x06D3
		$DateStamp = $this->hexToDec(strrev(substr($VP2Date,0,2))); // 0x06d3 = 0000011011010011
			$y = (($DateStamp & 0xFE00)>>9)+2000;
			$m = str_pad(($DateStamp & 0x01E0)>>5,2,'0',STR_PAD_LEFT);
			$d = str_pad($DateStamp & 0x1f,2,'0',STR_PAD_LEFT);

		$TimeStamp = $this->hexToDec(strrev(substr($VP2Date,-2))); // 0x03a2 = 0000001110100010
			$h = str_pad((int)($TimeStamp/100),2,'0',STR_PAD_LEFT);
			$min = str_pad($TimeStamp-$h*100,2,'0',STR_PAD_LEFT);
		return $y.'/'.$m.'/'.$d.' '.$h.':'.$min.':00';
	}
	function Get_DMPAFT_Raw()	{
		fwrite($this->fp,"DMPAFT\n");			// Send the command to VP2 : DumpAfter
		$r = fread($this->fp, 1);			// Read the answer
		if ($r == $this->symb['ACK'])			// ACK if VP2 understood
		{
			$d = $this->DMPAFT_SetVP2Date($this->StationConfig[$this->getKeyConf()]['Last_DMPAFT']); // define date of first archives record
			fwrite($this->fp, $d);				// Send this date
			$crc = $this->CalculateCRC($d);		// define the CRC of my date
			fwrite($this->fp, $crc);			// Send this CRC
			$r = fread($this->fp, 1);			// Read the answer
			if ($r == $this->symb['ACK'])			// ACK if VP2 confirm the CRC
			{
				$r = fread($this->fp, 6);			// Read the answer
				if (strlen($r)==6 && $this->CalculateCRC($r)==0x0000)
				{
					$nbrArch=0;
					$retry = $this->retry;
					$nbrPages = $this->hexToDec (strrev(substr($r,0,2)));		// Split Bytes in revers order : Nbr of page
					$firstArch = $this->hexToDec (strrev(substr($r,2,2)));		// Split Bytes in revers order : # of first archive
					$this->Waiting (0,'There are '.$nbrPages.'p. in queue, from archive '.$firstArch.' on first page.');
					fwrite($this->fp, $this->symb['ACK']);	// Send ACK to start
					for ($j=0;$j<$nbrPages;$j++)
					{
						$Page = fread($this->fp, 267);
						$this->Waiting (0,'Download Archive PAGE #'.$j.' since : '.$this->DMPAFT_GetVP2Date(substr($Page,1,4)));
						if (strlen($Page)==267 && $this->CalculateCRC($Page)==0x0000)
						{
							$retry = $this->retry;
							for($k=$firstArch;$k<=4;$k++)
							{
								$ArchiveStrRaw=substr($Page,1+52*$k,52);
								$ArchDate = $this->DMPAFT_GetVP2Date(substr($ArchiveStrRaw,0,4));
								if (strtotime($ArchDate) > strtotime($this->StationConfig[$this->getKeyConf()]['Last_DMPAFT']))
								{
// 									$this->Waiting (0,"\t".'ARCHIVE #'.($nbrArch++).' of '.$ArchDate.' saved.');
									$this->StationConfig[$this->getKeyConf()]['Last_DMPAFT'] = $ArchDate;
/** ################################################################################################################################
Ici on appelera succesivement 3 functions :
- Convert to Human redable ();
	prendra comme parametre : $ArchiveStrRaw , et me retourne un tableau avec les valeurs brutes dans leur unitée par defaut. (Edouard)
- Convert to Unit of SystemInternational ();
	prendra comme parametre le tableau precedant et converti et corrige chaque valeurs. (alban)
- Write Values ();
	prendra comme parametre le tabeau SI et l´enregistre dans un fichier et dans une base SQL. (edouard)
################################################################################################################################  **/
								}
							}
							$this->SaveConfs();
							$firstArch=0;
							fwrite($this->fp, $this->symb['ACK']);
						}
						else
						{
							if (!$retry)
							{
								$this->Waiting (0,'Page #'.$j.' invalide, Aborting Download.');
								fread($this->fp, 999); // vidange
								fwrite($this->fp, $this->symb['ESC']);
								return false;
							}
							else
							{
								$this->Waiting (10,'Page #'.$j.' invalide by wrong CRC, retry.'.$retry);
								fread($this->fp, 999); // vidange
								fwrite($this->fp, $this->symb['NAK']);
								$retry=$retry--;
								$j--;
							}
						}
					}
					return true;
				}
				else if ($r == $this->symb['NAK'])
					$this->Waiting (0,'DMPAFT Pages : NAK on first page, wrong Date or CRC!');
				else
				{
					$this->Waiting (0,'DMPAFT Pages : NULL!');
					fread($this->fp, 999); // vidange
					$this->Waiting (8);
				}
			}
			else if ($r == $this->symb['NAK'])
				$this->Waiting (0,'DMPAFT Date : NAK Bad CRC16!');
			else
			{
				$this->Waiting (0,'DMPAFT Date : NULL!');
				fread($this->fp, 999); // vidange
				$this->Waiting (8);
			}
		}
		else if ($r == $this->symb['NAK'])
			$this->Waiting (0,'DMPAFT NAK : Bad Command!');
		else
		{
			$this->Waiting (0,'DMPAFT NULL!');
			fread($this->fp, 999); // vidange
			$this->Waiting (8);
		}
		return true;
	}
	private function SaveConfs ()	{
		$confs = $this->getStationConfig();
		$confs[$this->getKeyConf()] = $this->StationConfig[$this->getKeyConf()];
		file_put_contents (dirname(__FILE__).DIRECTORY_SEPARATOR.'../../stations.conf', var_export($confs,true));
		return true;
	}
	private function GetConf ()	{
		return eval('return '.file_get_contents(dirname(__FILE__).DIRECTORY_SEPARATOR.'../../stations.conf').';');
	}

	function setKeyConf($value)	{ $this->KeyConf = $value; }
	function getKeyConf()	{ return $this->KeyConf; }

	function setStationConfig($value)	{ $this->StationConfig = $value; }
	function getStationConfig()	{ return $this->StationConfig; }

	function setStationFolder($value)	{ $this->StationFolder = $value; }
	function getStationFolder()	{ return $this->StationFolder; }

	function getStationIP()	{ return $this->StationConfig[$this->getKeyConf()]['IP']; }
	function getStationPort()	{ return $this->StationConfig[$this->getKeyConf()]['Port']; }
}
?>
